AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This stack deploys and configures Active Directory domain controllers into an
  existing VPC environment. This stack makes use of the outputs from the 
  "VPCEnvironmentForCapstone" stack. 

  This stack will deploy two instances and, through the use of cfn-init/resource
  metadata, will install ADDS and  configure the instances as domain controllers.
  These instances will fulfill the requirement for at least two DCs in the 
  environment. Any further DCs will be created by the "AdditionalDCStackForCapstone"
  stack.
Parameters:
  NetworkStackName:
    Type: String
    Description: 'The name of the stack that created the AWS networking. Used to import networking stack outputs.'
    Default: 'CapstoneNetworkStack'
  DomainDNSName:
    Type: String
    Description: 'The domain name as it would be entered into a browser. (Ex. "example.com")'
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    MaxLength: '25'
    MinLength: '3'
  DomainNetBIOSName:
    Type: String
    Description: >-
        The NetBIOS name of the domain, typically the same as the domain DNS name, but with the 
        root domain removed. (Ex. "EXAMPLE")
    AllowedPattern: '[a-zA-Z0-9\-]+'
    MaxLength: '15'
    MinLength: '1'
  DomainAdminUser:
    Type: String
    Description: >-
        The user name of a user to be added and given Domain Admin privileges.
        This user is separate from the default Administrator account.
    AllowedPattern: '[a-zA-Z0-9]*'
    MaxLength: '25'
    MinLength: '3'
  DomainAdminPassword:
    Type: String
    Description: 'The account password for the domain admin user.'
  RestoreModePassword:
    Type: String
    Description: 'Password for a separate Administrator account when DCs are in Restore Mode.'
  DCInstanceType:
    Type: String
    Description: 'The instance type for the Domain Controllers. Default: t2.micro'
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: t2.micro
  DCImage:
    Type: String
    Default: 'ami-05446e60'
    Description: >-
      The AMI ID to be used when creating DCs. Hopefully, I'll have time to find
      more AMIs for other regions and can use mappings instead.
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: >-
      The name of the key pair used to connect to instances. Without this,
      instances are inaccessible to remote administration.
  DC1PrivIP:
    Type: String
    Description: 'The private IP to be used for DC1.'
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.2.10
  DC1NetBIOSName:
    Type: String
    Description: 'The NetBIOS name for the first Domain Controller.'
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: DC1
    MaxLength: '15'
    MinLength: '1'
  DC2PrivIP:
    Type: String
    Description: 'The private IP to be used for DC2.'
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.4.10
  DC2NetBIOSName:
    Type: String
    Description: 'The NetBIOS name for the second Domain Controller.'
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: DC2
    MaxLength: '15'
    MinLength: '1'
Resources:
  DHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    DependsOn:
      - DC1WaitCondition
      - DC2WaitCondition
    Properties:
      DomainName: !Ref DomainDNSName
      DomainNameServers:
        - !Ref DC1PrivIP
        - !Ref DC2PrivIP
      Tags:
        - Key: Domain
          Value: !Ref DomainDNSName
  AssociateVPCtoDHCPOptions:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      DhcpOptionsId: !Ref DHCPOptions
  DC1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - setup
            - rename
            - installADDS
            - signalActiveDirectorySuccess
            - configureSites
            - createAWSGroups
            - finalize
        setup:
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackName'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.DC1.Metadata.AWS::CloudFormation::Init
                  - 'action=cfn-init.exe -v -c config -s '
                  - !Ref 'AWS::StackId'
                  - ' -r DC1'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\scripts\Set-StaticIP.ps1':
              content: !Join 
                - ''
                - - $netip = Get-NetIPConfiguration;
                  - >-
                    $ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq
                    $netip.IPv4Address.IpAddress};
                  - Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;
                  - >-
                    Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4
                    -IPAddress $netip.IPv4Address.IpAddress -PrefixLength
                    $ipconfig.PrefixLength -DefaultGateway
                    $netip.IPv4DefaultGateway.NextHop;
                  - >-
                    Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses
                    $netip.DNSServer.ServerAddresses;
                  - ''
            'c:\cfn\scripts\ConvertTo-EnterpriseAdmin.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/ConvertTo-EnterpriseAdmin.ps1'
            'c:\cfn\scripts\Create-AWSGroups.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Create-AWSGroups.ps1'
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
          commands:
            a-disable-windows-firewall:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "Get-NetFirewallProfile |
                    Set-NetFirewallProfile -Enabled False"
              waitAfterCompletion: '0'
        rename:
          commands:
            a-set-static-ip:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -ExecutionPolicy RemoteSigned -Command
                    c:\cfn\scripts\Set-StaticIP.ps1
              waitAfterCompletion: '45'
            b-powershell-RenameComputer:
              command: !Join 
                - ''
                - - 'powershell.exe Rename-Computer -NewName '
                  - !Ref DC1NetBIOSName
                  - ' -Restart'
              waitAfterCompletion: forever
        installADDS:
          commands:
            a-install-Domain-Services:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "Install-WindowsFeature
                    AD-Domain-Services, rsat-adds -IncludeAllSubFeature"
              waitAfterCompletion: '0'
            b-install-forest:
              command: !Join 
                - ''
                - - 'powershell.exe -Command "Install-ADDSForest -DomainName '
                  - !Ref DomainDNSName
                  - ' -SafeModeAdministratorPassword (ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force) -DomainNetbiosName '
                  - !Ref DomainNetBIOSName
                  - ' -Confirm:$false -Force"'
              waitAfterCompletion: forever
            c-restart-Netlogon-service:
              command: !Join
                - ''
                - - powershell.exe -Command Restart-Service Netlogon -EA 0
              waitAfterCompletion: '300'
            d-create-new-user:
              command: !Join
                - ''
                - - 'powershell.exe -Command "New-ADUser -Name '
                  - !Ref DomainAdminUser
                  - ' -UserPrincipalName '
                  - !Ref DomainAdminUser
                  - ' -AccountPassword (ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true"'
              waitAfterCompletion: '0'
            e-make-user-domain-admin:
              command: !Join
                - ''
                - - >-
                    powershell.exe -ExecutionPolicy RemoteSigned -Command
                    c:\cfn\scripts\ConvertTo-EnterpriseAdmin.ps1 -Members 
                  - !Ref DomainAdminUser
              waitAfterCompletion: '0'
        signalActiveDirectorySuccess:
          commands:
            a-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref ActiveDirectoryWaitHandle
                  - '"'
        configureSites:
          commands:
            a-rename-default-site:
              command: !Join
                - ''
                - - 'powershell.exe '
                  - '"'
                  - >-
                    Get-ADObject -SearchBase 
                    (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq
                    'Default-First-Site-Name'} | Rename-ADObject -NewName AZ1
                  - '"'
              waitAfterCompletion: '0'
            b-create-site-2:
              command: !Join
                - ''
                - - powershell.exe -Command "New-ADReplicationSite AZ2"
              waitAfterCompletion: '0'
            c-create-public-subnet-1:
              command: !Join
                - ''
                - - 'powershell.exe -Command "New-ADReplicationSubnet -Name '
                  - Fn::ImportValue:
                      !Sub '${NetworkStackName}-PubSub1Cidr'
                  - ' -Site AZ1"'
              waitAfterCompletion: '0'
            d-create-private-subnet-1:
              command: !Join
                - ''
                - - 'powershell.exe -Command "New-ADReplicationSubnet -Name '
                  - Fn::ImportValue:
                      !Sub '${NetworkStackName}-PrivSub1Cidr'
                  - ' -Site AZ1"'
              waitAfterCompletion: '0'
            e-create-private-subnet-2:
              command: !Join
                - ''
                - - 'powershell.exe -Command "New-ADReplicationSubnet -Name '
                  - Fn::ImportValue:
                      !Sub '${NetworkStackName}-PrivSub2Cidr'
                  - ' -Site AZ2"'
              waitAfterCompletion: '0'
            f-set-replication-site-link:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - >-
                    Get-ADReplicationSiteLink -Filter * |
                    Set-ADReplicationSiteLink -SitesIncluded @{add='AZ2'}
                    -ReplicationFrequencyInMinutes 15"
              waitAfterCompletion: '0'
        createAWSGroups:
          commands:
            a-create-aws-groups:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'c:\cfn\scripts\Create-AWSGroups.ps1 -DomainDNSName '
                  - !Ref DomainDNSName
                  - ' -UserCredential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))"' 
        finalize:
          commands:
            a-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref DC1WaitHandle
                  - '"'
    Properties:
      ImageId: !Ref DCImage
      InstanceType: !Ref DCInstanceType
      KeyName: !Ref KeyPair
      PrivateIpAddress: !Ref DC1PrivIP
      SecurityGroupIds:
        - !Ref DC1SecurityGroup
      SubnetId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-PrivSub1Id'
      Tags:
        - Key: Name
          Value: !Ref DC1NetBIOSName
      UserData: !Base64
        Fn::Join:
          - ''
          - - |
              <script>
            - 'cfn-init.exe -v -c config -s '
            - !Ref 'AWS::StackId'
            - ' -r DC1'
            - ' --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              </script>
  DC2:
    Type: 'AWS::EC2::Instance'
    DependsOn: ActiveDirectoryWaitCondition
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - setup
            - rename
            - join
            - addDC
            - finalize
        setup:
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackName'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.DC2.Metadata.AWS::CloudFormation::Init
                  - 'action=cfn-init.exe -v -c config -s '
                  - !Ref 'AWS::StackId'
                  - ' -r DC2'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\scripts\Set-StaticIP.ps1':
              content: !Join 
                - ''
                - - $netip = Get-NetIPConfiguration;
                  - >-
                    $ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq
                    $netip.IPv4Address.IpAddress};
                  - Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;
                  - >-
                    Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4
                    -IPAddress $netip.IPv4Address.IpAddress -PrefixLength
                    $ipconfig.PrefixLength -DefaultGateway
                    $netip.IPv4DefaultGateway.NextHop;
                  - >-
                    Get-NetAdapter | Set-DnsClientServerAddress
                    -ServerAddresses 
                  - !Ref DC1PrivIP
                  - |+
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
          commands:
            a-disable-windows-firewall:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "Get-NetFirewallProfile |
                    Set-NetFirewallProfile -Enabled False"
              waitAfterCompletion: '0'
        rename:
          commands:
            a-set-static-ip:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -ExecutionPolicy RemoteSigned -Command
                    c:\cfn\scripts\Set-StaticIP.ps1
              waitAfterCompletion: '45'
            b-powershell-RenameComputer:
              command: !Join 
                - ''
                - - 'powershell.exe Rename-Computer -NewName '
                  - !Ref DC2NetBIOSName
                  - ' -Restart'
              waitAfterCompletion: forever
        join:
          commands:
            a-join-domain:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Add-Computer -DomainName '
                  - !Ref DomainDNSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force))) -Restart'
              waitAfterCompletion: forever
        addDC:
          commands:
            a-install-domain-services:
              command: !Join
                - ''
                - - >-
                    powershell.exe -Command "Install-WindowsFeature
                    AD-Domain-Services, rsat-adds -IncludeAllSubFeature"
              waitAfterCompletion: '0'
            b-add-dc:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Install-ADDSDomainController -InstallDns -DomainName '
                  - !Ref DomainDNSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force))) '
                  - '-SafeModeAdministratorPassword (ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force) -Confirm:$false -Force"'
              waitAfterCompletion: forever
        finalize:
          commands:
            a-update-dns-servers-dc2:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - >-
                    Get-NetAdapter | Set-DnsClientServerAddress
                    -ServerAddresses 
                  - !Ref DC1PrivIP
                  - ','
                  - !Ref DC2PrivIP
                  - '"'
              waitAfterCompletion: '0'
            b-update-dns-servers-dc1:
              command: !Join
                - ''
                - - 'powershell.exe -Command '
                  - '"Invoke-Command -Scriptblock{ '
                  - >-
                    Get-NetAdapter | Set-DnsClientServerAddress
                    -ServerAddresses 
                  - !Ref DC1PrivIP
                  - ','
                  - !Ref DC2PrivIP
                  - ' } -ComputerName '
                  - !Ref DC1NetBIOSName
                  - '.'
                  - !Ref DomainDNSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))"'
              waitAfterCompletion: '0'
            c-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref DC2WaitHandle
                  - '"'
    Properties:
      ImageId: !Ref DCImage
      InstanceType: !Ref DCInstanceType
      KeyName: !Ref KeyPair
      PrivateIpAddress: !Ref DC2PrivIP
      SecurityGroupIds:
        - !Ref DC2SecurityGroup
      SubnetId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-PrivSub2Id'
      Tags:
        - Key: Name
          Value: !Ref DC2NetBIOSName
      UserData: !Base64
        Fn::Join:
          - ''
          - - |
              <script>
            - 'cfn-init.exe -v -c config -s '
            - !Ref 'AWS::StackId'
            - ' -r DC2 --region '
            - !Ref 'AWS::Region'
            - |+
            - |
              </script>
  DC1WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: DC1
    Properties:
      Handle: !Ref DC1WaitHandle
      Timeout: '3600'
  DC1WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  ActiveDirectoryWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: DC1
    Properties:
      Handle: !Ref ActiveDirectoryWaitHandle
      Timeout: '3600'
  ActiveDirectoryWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  DC2WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: DC2
    Properties:
      Handle: !Ref DC2WaitHandle
      Timeout: '3600'
  DC2WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  DC1SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'DC1 Security Group'
      GroupDescription: 'Security Group for Domain Controller 1'
      VpcId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5985'
          ToPort: '5985'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: udp
          FromPort: '123'
          ToPort: '123'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '135'
          ToPort: '135'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '9389'
          ToPort: '9389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '138'
          ToPort: '138'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '445'
          ToPort: '445'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '445'
          ToPort: '445'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '464'
          ToPort: '464'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '464'
          ToPort: '464'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '49152'
          ToPort: '65535'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '49152'
          ToPort: '65535'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '389'
          ToPort: '389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '389'
          ToPort: '389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '636'
          ToPort: '636'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '3268'
          ToPort: '3268'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '3269'
          ToPort: '3269'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: tcp
          FromPort: '9389'
          ToPort: '9389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '88'
          ToPort: '88'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '88'
          ToPort: '88'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '5355'
          ToPort: '5355'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '137'
          ToPort: '137'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '139'
          ToPort: '139'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '5722'
          ToPort: '5722'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '123'
          ToPort: '123'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '135'
          ToPort: '135'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '9389'
          ToPort: '9389'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '138'
          ToPort: '138'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '445'
          ToPort: '445'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '445'
          ToPort: '445'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '464'
          ToPort: '464'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '464'
          ToPort: '464'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '49152'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '49152'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '389'
          ToPort: '389'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '389'
          ToPort: '389'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '636'
          ToPort: '636'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '3268'
          ToPort: '3268'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '3269'
          ToPort: '3269'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '88'
          ToPort: '88'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '88'
          ToPort: '88'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PubSub1Cidr'
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PubSub1Cidr'
  DC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'DC2 Security Group'
      GroupDescription: 'Security Group for Domain Controller 2'
      VpcId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5985'
          ToPort: '5985'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: udp
          FromPort: '123'
          ToPort: '123'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '135'
          ToPort: '135'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '9389'
          ToPort: '9389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '138'
          ToPort: '138'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '445'
          ToPort: '445'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '445'
          ToPort: '445'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '464'
          ToPort: '464'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '464'
          ToPort: '464'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '49152'
          ToPort: '65535'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '49152'
          ToPort: '65535'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '389'
          ToPort: '389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '389'
          ToPort: '389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '636'
          ToPort: '636'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '3268'
          ToPort: '3268'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '3269'
          ToPort: '3269'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: tcp
          FromPort: '9389'
          ToPort: '9389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '88'
          ToPort: '88'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '88'
          ToPort: '88'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '5355'
          ToPort: '5355'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '137'
          ToPort: '137'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '139'
          ToPort: '139'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '5722'
          ToPort: '5722'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '123'
          ToPort: '123'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '135'
          ToPort: '135'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '9389'
          ToPort: '9389'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '138'
          ToPort: '138'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '445'
          ToPort: '445'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '445'
          ToPort: '445'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '464'
          ToPort: '464'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '464'
          ToPort: '464'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '49152'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '49152'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '389'
          ToPort: '389'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '389'
          ToPort: '389'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '636'
          ToPort: '636'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '3268'
          ToPort: '3268'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '3269'
          ToPort: '3269'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '88'
          ToPort: '88'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: udp
          FromPort: '88'
          ToPort: '88'
          SourceSecurityGroupId: !Ref DomainMemberSG
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PubSub1Cidr'
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PubSub1Cidr'
  DomainMemberSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'Domain Member Security Group'
      GroupDescription: 'Security Group for Domain Member Computers'
      VpcId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5985'
          ToPort: '5985'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '49152'
          ToPort: '65535'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: udp
          FromPort: '49152'
          ToPort: '65535'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: tcp
          FromPort: '5985'
          ToPort: '5985'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '49152'
          ToPort: '65535'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: udp
          FromPort: '49152'
          ToPort: '65535'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PubSub1Cidr'
Outputs:
  DomainMemberSG:
    Description: 'The ID of the security group for domain members.'
    Value: !Ref DomainMemberSG
    Export:
      Name: !Sub "${AWS::StackName}-DomainMemberSG"
