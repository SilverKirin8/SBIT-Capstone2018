AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This stack deploys and configures Active Directory domain controllers into an
  existing VPC environment. This stack makes use of the outputs from the 
  "VPCEnvironmentForCapstone" stack. 


  This stack will deploy the instances and, through the use of cfn-init/resource
  metadata, will install ADDS and  configure the instance as a domain
  controller.

  At this point, I haven't decided if this stack will be static for demo
  purposes. If so, this stack will deploy a hard-coded pair of DCs, the first 
  creating the forest and domain, and the second being joined and then
  promoted.  If this stack is not static, I might create two similar stacks, one
  to create the domain and forest, and a second for all other instances that 
  will be joined. I could also try to add conditions to the metadata putting
  both functions in the same stack. More research required to decide.


  Needed parameters - NetBIOS names, Admin Password, Admin User(?),
  RestoreModePassword (same as admin pass?)
Parameters:
  DomainDNSName:
    Type: String
    Description: The domain name as it would be entered into a browser. (Ex. 'example.com')
  DCInstanceType:
    Type: String
    Default: t2.micro
    Description: 'The instance type for the Domain Controllers. Default: t2.micro'
  DCImage:
    Type: String
    Default: ami-05446e60
    Description: >-
      The AMI ID to be used when creating DCs. Hopefully, I'll have time to find
      more AMIs for other regions and can use mappings instead.
  KeyPair:
    Type: String
    Description: >-
      The name of the key pair used to connect to instances. Without this,
      instances are inaccessible to remote administration.
  DC1NetBIOSName:
    Type: String
    Description: >-
      The NetBIOS name for the first Domain Controller. Requires user to come up
      with naming convention. May have default for ease of testing.
Resources:
  DC1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - setup
            - rename
            - installADDS
            - configureSites
            - finalize
        setup:
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackName'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.DC1.Metadata.AWS::CloudFormation::Init
                  - 'action=cfn-init.exe -v -c config -s '
                  - !Ref 'AWS::StackId'
                  - ' -r DC1'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\scripts\Set-StaticIP.ps1':
              content: !Join 
                - ''
                - - $netip = Get-NetIPConfiguration;
                  - >-
                    $ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq
                    $netip.IPv4Address.IpAddress};
                  - Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;
                  - >-
                    Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4
                    -IPAddress $netip.IPv4Address.IpAddress -PrefixLength
                    $ipconfig.PrefixLength -DefaultGateway
                    $netip.IPv4DefaultGateway.NextHop;
                  - >-
                    Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses
                    $netip.DNSServer.ServerAddresses;
                  - ''
            'c:\cfn\scripts\ConvertTo-EnterpriseAdmin.ps1':
              content: !Join 
                - ''
                - - |
                    [CmdletBinding()]
                  - |
                    param(
                  - |
                    '   [string[]]'
                  - |
                    [Parameter(Position=0)]
                  - >
                    '   $Groups = @('domain admins','schema admins','enterprise
                    admins'),'
                  - |
                    '   [string[]]'
                  - |
                    '   [Parameter(Mandatory=$true, Position=1)]'
                  - |
                    '   $Members'
                  - |
                    )
                  - ''
                  - |
                    $Groups | ForEach-Object{
                  - |
                    '   Add-ADGroupMember -Identity $_ -Members $Members'
                  - |
                    }
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
          commands:
            disable-windows-firewall:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "Get-NetFirewallProfile |
                    Set-NetFirewallProfile -Enabled False"
              waitAfterCompletion: '0'
        rename:
          commands:
            set-static-ip:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -ExecutionPolicy RemoteSigned -Command
                    c:\cfn\scripts\Set-StaticIP.ps1
              waitAfterCompletion: '45'
            powershell-RenameComputer:
              command: !Join 
                - ''
                - - 'powershell.exe Rename-Computer -NewName '
                  - !Ref DC1NetBIOSName
                  - ' -Restart'
              waitAfterCompletion: forever
        installADDS:
          commands:
            install-Domain-Services:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "Install-WindowsFeature
                    AD-Domain-Services, rsat-adds -IncludeAllSubFeature"
              waitAfterCompletion: '0'
            install-forest:
              command: !Join 
                - ''
                - 'powershell.exe -Command "Install-ADDSForest -DomainName '
                - !Ref DomainDNSName
                - ' -SafeModeAdministratorPassword (ConvertTo-SecureString '
                - ''''
                - !Ref DomainAdminPassword
                - ''''
                - ' -AsPlainText -Force) -DomainNetbiosName '
                - !Ref DomainNetBIOSName
                - ' -Confirm:$false -Force"'
              waitAfterCompletion: forever
            restart-Netlogon-service:
              command: !Join
                - ''
                - - powershell.exe -Command Restart-Service Netlogon -EA 0
              waitAfterCompletion: '180'
            create-new-user:
              command: !Join
                - ''
                - - 'powershell.exe -Command "New-ADUser -Name '
                  - !Ref DomainAdminUser
                  - ' -UserPrincipalName '
                  - !Ref DomainAdminUser
                  - ' -AccountPassword (ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true"'
              waitAfterCompletion: '0'
            make-user-domain-admin:
              command: !Join
                - ''
                - - >-
                    powershell.exe -ExecutionPolicy RemoteSigned -Command
                    c:\cfn\scripts\ConvertTo-EnterpriseAdmin.ps1 -Members
                  - !Ref DomainAdminUser
              waitAfterCompletion: '0'
        configureSites:
          commands:
            rename-default-site:
              command: !Join
                - ''
                - - 'powershell.exe '
                  - '"'
                  - >-
                    Get-ADObject -SearchBase 
                    (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq
                    'Default-First-Site-Name'} | Rename-ADObject -NewName AZ1
                  - '"'
              waitAfterCompletion: '0'
            create-site-2:
              command: !Join
                - ''
                - - powershell.exe "New-ADReplicationSite AZ2"
    Properties:
      ImageId: !Ref DCImage
      InstanceType: !Ref DCInstanceType
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !Ref DC1SecurityGroup
      SubnetId: !Ref PrivSub1 "This may change based on using outputs from other stacks or using a single stack. Currently assumes a single stack."
      Tags:
        - Key: Name
          Value: !Ref DC1NetBIOSName
