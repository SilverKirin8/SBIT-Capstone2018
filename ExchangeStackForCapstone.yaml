AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This stack deploys and configures an Exchange server into an existing VPC environment. This stack makes use 
  of the outputs from the "NetworkStackForCapstone" stack. This Exchange server will not fit in the Free Tier.
Parameters:
  NetworkStackName:
    Type: String
    Description: 'The name of the stack used to create the VPC and other network resources.'
  ADStackName:
    Type: String
    Description: 'The name of the stack used to create the DCs and the domain.'
  DomainDNSName:
    Type: String
    Description: >-
      This domain name should be the domain name used in the ADStack.
      The domain name as it would be entered into a browser. (Ex. "example.com")
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    MaxLength: '25'
    MinLength: '3'
  DomainNetBIOSName:
    Type: String
    Description: >-
      This NetBIOS name should be the same as the name used in ADStack.
      The NetBIOS name of the domain, typically the same as the domain DNS name, but with the 
      root domain removed. (Ex. "EXAMPLE")
    AllowedPattern: '[a-zA-Z0-9\-]+'
    MaxLength: '15'
    MinLength: '1'
  DomainAdminUser:
    Type: String
    Description: >-
      This username should be for the same user created in ADStack.
      The user name of a user to be added and given Domain Admin privileges.
      This user is separate from the default Administrator account.
    AllowedPattern: '[a-zA-Z0-9]*'
    MaxLength: '25'
    MinLength: '3'
  DomainAdminPassword:
    Type: String
    Description: >-
      This password should be for the same user created in ADStack.
      The account password for the domain admin user.
  ExchInstanceType:
    Type: String
    Description: 'The instance type for the Exchange server. Default: t2.large'
    AllowedValues:
      - t2.micro
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: t2.large
  ExchImage:
    Type: String
    Description: 'The AMI ID to be used when creating the Exchange server.'
    Default: 'ami-05446e60'
  KeyPair:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: >-
      The name of the key pair used to connect to instances. Without this,
      instances are inaccessible to remote administration.
  ExchPrivIP:
    Type: String
    Description: 'The private IP to be used for the Exchange server.'
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.2.30
  ExchNetBIOSName:
    Type: String
    Description: 'The NetBIOS name for the Exchange server.'
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: EXCH1
    MaxLength: '15'
    MinLength: '1'
  ExchDriveSize:
    Type: String
    Description: 'The size of the root volume for the Exchange Server.'
    Default: '45'
Resources:
  EXCH1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - setup
            - rename
            - join
            - installExchange
            - createMailboxes
            - finalize
        setup:
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackName'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.EXCH1.Metadata.AWS::CloudFormation::Init
                  - 'action=cfn-init.exe -v -c config -s '
                  - !Ref 'AWS::StackId'
                  - ' -r EXCH1'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\scripts\Set-StaticIP.ps1':
              content: !Join 
                - ''
                - - $netip = Get-NetIPConfiguration;
                  - >-
                    $ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq
                    $netip.IPv4Address.IpAddress};
                  - Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;
                  - >-
                    Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4
                    -IPAddress $netip.IPv4Address.IpAddress -PrefixLength
                    $ipconfig.PrefixLength -DefaultGateway
                    $netip.IPv4DefaultGateway.NextHop;
                  - >-
                    Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses
                    $netip.DNSServer.ServerAddresses;
                  - ''
            'c:\cfn\scripts\Mount-Exchange.ps1':
              content: !Join
                - ''
                - - 'Invoke-Command -Script { '
                  - $mount = Mount-DiskImage -ImagePath '
                  - c:\cfn\downloads\ExchangeServer2016-x64-cu8.iso'
                  - ' -PassThru; '
                  - '$volume = Get-DiskImage -ImagePath $mount.ImagePath | Get-Volume; '
                  - $exchDriveLetter = $volume.DriveLetter + '
                  - :'
                  - '; $exchDriveLetter > c:\cfn\driveletter.txt } -ComputerName '
                  - !Ref ExchNetBIOSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))'
              waitAfterCompletion: '0'
            'c:\cfn\scripts\Prepare-ActiveDirectory.ps1':
              content: !Join
                - ''
                - - Invoke-Command -Script {
                  - '$exchDriveLetter = Get-Content c:\cfn\driveletter.txt; '
                  - Invoke-Expression "$exchDriveLetter\Setup.exe /PrepareAD /OrganizationName:SBITExchange /IAcceptExchangeServerLicenseTerms"
                  - '}'
            'c:\cfn\scripts\Install-Exchange.ps1':
              content: !Join
                - ''
                - - Invoke-Command -Script {
                  - '$exchDriveLetter = Get-Content c:\cfn\driveletter.txt; '
                  - Invoke-Expression "$exchDriveLetter\Setup.exe /mode:Install /role:Mailbox /MdbName:DB1 /DbFilePath:'C:\Databases\DB1\DB1.edb' /LogFolderPath:'C:\Databases\DB1' /InstallWindowsComponents /IAcceptExchangeServerLicenseTerms"
                  - '}'
            'c:\cfn\scripts\ExchangeInstall.bat':
              source: >-
                https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/ExchangeInstall.bat
            'c:\cfn\scripts\Enable-AutoLogon.ps1':
              source: >-
                https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Enable-AutoLogon.ps1
            'c:\cfn\scripts\Disable-AutoLogon.ps1':
              source: >-
                https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Disable-AutoLogon.ps1
            'c:\cfn\downloads\UcmaRuntimeSetup.exe':
              source: >-
                http://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe
            'c:\cfn\downloads\ExchangeServer2016-x64-cu8.iso':
              source: >-
                https://download.microsoft.com/download/1/F/7/1F777B44-32CB-4F3D-B486-3D0F566D79A9/ExchangeServer2016-x64-cu8.iso
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
          commands:
            a-disable-windows-firewall:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "Get-NetFirewallProfile |
                    Set-NetFirewallProfile -Enabled False"
              waitAfterCompletion: '0'
        rename:
          commands:
            a-set-static-ip:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -ExecutionPolicy RemoteSigned -Command
                    c:\cfn\scripts\Set-StaticIP.ps1
              waitAfterCompletion: '45'
            b-powershell-RenameComputer:
              command: !Join 
                - ''
                - - 'powershell.exe Rename-Computer -NewName '
                  - !Ref ExchNetBIOSName
                  - ' -Restart'
              waitAfterCompletion: forever
        join:
          commands:
            a-join-domain:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Add-Computer -DomainName '
                  - !Ref DomainDNSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force))) -Restart'
              waitAfterCompletion: forever
            b-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref JoinWaitHandle
                  - '"'
              waitAfterCompletion: '0'
        installExchange:
          commands:
            a-install-prereqs:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Install-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, '
                  - 'RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, '
                  - 'RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, '
                  - 'Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, '
                  - 'Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, '
                  - 'Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, '
                  - 'Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, '
                  - 'Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, '
                  - 'Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, '
                  - 'RSAT-ADDS -Restart"'
              waitAfterCompletion: '0'
            b-install-ucma-runtime:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Invoke-Command -Script { '
                  - Invoke-Expression '
                  - c:\cfn\downloads\UcmaRuntimeSetup.exe /passive /norestart'
                  - ' } -ComputerName '
                  - !Ref ExchNetBIOSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))"'
              waitAfterCompletion: '0'
            c-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref PrereqWaitHandle
                  - '"'
              waitAfterCompletion: '0'
            d-enable-autologon:
              command: !Join 
                - ''
                - - 'powershell.exe -Command c:\cfn\scripts\Enable-AutoLogon.ps1'
                  - ' -UserName '
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ' -Password '
                  - !Ref DomainAdminPassword
                  - ' -StartupScript c:\cfn\scripts\ExchangeInstall.bat'
              waitAfterCompletion: '0'
            e-reboot:
              command: powershell.exe -command Restart-Computer -Force
              waitAfterCompletion: forever
            f-wait:
              command: powershell.exe -command Start-Sleep -Seconds 3600
              waitAfterCompletion: '0'
            g-disable-autologon:
              command: !Join
                - ''
                - - 'powershell.exe -Command c:\cfn\scripts\Disable-AutoLogon.ps1'
            h-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref PrepAndInstallWaitHandle
                  - '"'
              waitAfterCompletion: '0'
        createMailboxes:
          commands:
            a-create-mailboxes:
              command: !Join
                - ''
                - - powershell.exe -Command "Invoke-Command -Script {
                  - '$session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://'
                  - !Ref ExchNetBIOSName
                  - '.'
                  - !Ref DomainDNSName
                  - '/Powershell/ -Authentication Kerberos -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force))); '
                  - 'Import-PSSession $session; '
                  - Get-User -OrganizationalUnit 'Users' | Enable-Mailbox -Database 'DB1'
                  - '} -ComputerName '
                  - !Ref ExchNetBIOSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))"'
              waitAfterCompletion: '0'
            b-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref MailboxWaitHandle
                  - '"'
              waitAfterCompletion: '0'
        finalize:
          commands:
            a-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref ExchWaitHandle
                  - '"'
              waitAfterCompletion: '0'
    Properties:
      ImageId: !Ref ExchImage
      InstanceType: !Ref ExchInstanceType
      KeyName: !Ref KeyPair
      PrivateIpAddress: !Ref ExchPrivIP
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub '${ADStackName}-DomainMemberSG'
        - !Ref ExchSecurityGroup
      SubnetId: 
        Fn::ImportValue: 
          !Sub '${NetworkStackName}-PrivSub1Id'
      Tags:
        - Key: 'Name'
          Value: !Ref ExchNetBIOSName
      UserData: !Base64
        Fn::Join:
            - ''
            - - |
                <script>
              - 'cfn-init.exe -v -c config -s '
              - !Ref 'AWS::StackId'
              - ' -r EXCH1 --region '
              - !Ref 'AWS::Region'
              - |+
              - |
                </script>
  ExchWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: EXCH1
    Properties:
      Handle: !Ref ExchWaitHandle
      Timeout: '14400'
  ExchWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  JoinWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: EXCH1
    Properties:
      Handle: !Ref JoinWaitHandle
      Timeout: '3600'
  JoinWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  PrereqWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: EXCH1
    Properties:
      Handle: !Ref PrereqWaitHandle
      Timeout: '3600'
  PrereqWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  PrepAndInstallWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: EXCH1
    Properties:
      Handle: !Ref PrepAndInstallWaitHandle
      Timeout: '14400'
  PrepAndInstallWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  MailboxWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: EXCH1
    Properties:
      Handle: !Ref MailboxWaitHandle
      Timeout: '14400'
  MailboxWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  ExchSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'Exchange Server Security Group'
      GroupDescription: 'Security Group for Exchange Servers'
      VpcId:
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5985'
          ToPort: '5985'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId:
            Fn::ImportValue:
              !Sub '${ADStackName}-DomainMemberSG'