AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This stack creates and configures two file servers. These file servers will have a second volume, 
  created to isolate files for file shares (and to ease file paths during configuration), a DFS 
  namespace, DFS replication, and possibly FSRM for file screens.
Parameters:
  NetworkStackName:
    Type: String
    Description: 'The name of the stack used to create the VPC and other network resources.'
  ADStackName:
    Type: String
    Description: 'The name of the stack used to create the DCs and the domain.'
  DomainDNSName:
    Type: String
    Description: >-
      This domain name should be the domain name used in the ADStack.
      The domain name as it would be entered into a browser. (Ex. "example.com")
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    MaxLength: '25'
    MinLength: '3'
  DomainNetBIOSName:
    Type: String
    Description: >-
      This NetBIOS name should be the same as the name used in ADStack.
      The NetBIOS name of the domain, typically the same as the domain DNS name, but with the 
      root domain removed. (Ex. "EXAMPLE")
    AllowedPattern: '[a-zA-Z0-9\-]+'
    MaxLength: '15'
    MinLength: '1'
  DomainAdminUser:
    Type: String
    Description: >-
      This username should be for the same user created in ADStack.
      The user name of a user to be added and given Domain Admin privileges.
      This user is separate from the default Administrator account.
    AllowedPattern: '[a-zA-Z0-9]*'
    MaxLength: '25'
    MinLength: '3'
  DomainAdminPassword:
    Type: String
    Description: >-
      This password should be for the same user created in ADStack.
      The account password for the domain admin user.
  PrimaryAZ:
    Type: String
    Description: 'The Availability Zone of Public Subnet 1 and Private Subnet 1. (Ex. "us-east-2a")'
    Default: us-east-2a
  SecondaryAZ:
    Type: String
    Description: 'The Availability Zone of Private Subnet 2. (Ex. "us-east-2b")'
    Default: us-east-2b
  FSInstanceType:
    Type: String
    Description: 'The instance type for the File Servers. Default: t2.micro'
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: t2.micro
  FSImage:
    Type: String
    Description: 'The AMI ID to be used when creating file servers.'
    Default: 'ami-05446e60'
  FSVolumeSize:
    Type: Number
    Description: 'The size of volumes to add to file server instances for file shares.'
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: >-
      The name of the key pair used to connect to instances. Without this, 
      instances are inaccessible to remote administration.
  FS1PrivIP:
    Type: String
    Description: 'The private IP to be used for FS1.'
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.2.20
  FS1NetBIOSName:
    Type: String
    Description: 'The NetBIOS name for the first file server.'
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: FS1
    MaxLength: '15'
    MinLength: '1'
  FS2PrivIP:
    Type: String
    Description: 'The private IP to be used for FS2.'
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.4.20
  FS2NetBIOSName:
    Type: String
    Description: 'The NetBIOS name for the second file server.'
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: FS2
    MaxLength: '15'
    MinLength: '1'
Resources:
  FS1:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - setup
            - initializeDisk
            - rename
            - join
            - configureFSRM
            - installDFS
            - createSharedFolders
            - runCreateDfsScript
            - finalize
        setup:
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackName'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.FS1.Metadata.AWS::CloudFormation::Init
                  - 'action=cfn-init.exe -v -c config -s '
                  - !Ref 'AWS::StackId'
                  - ' -r FS1'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\scripts\Set-StaticIP.ps1':
              content: !Join 
                - ''
                - - $netip = Get-NetIPConfiguration;
                  - >-
                    $ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq
                    $netip.IPv4Address.IpAddress};
                  - Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;
                  - >-
                    Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4
                    -IPAddress $netip.IPv4Address.IpAddress -PrefixLength
                    $ipconfig.PrefixLength -DefaultGateway
                    $netip.IPv4DefaultGateway.NextHop;
                  - >-
                    Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses
                    $netip.DNSServer.ServerAddresses;
                  - ''
            'c:\cfn\scripts\Configure-Fsrm.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Configure-Fsrm.ps1'
            'c:\cfn\scripts\Create-SharedFolders.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Create-SharedFolders.ps1'
            'c:\cfn\scripts\Format-AWSDisk.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Format-AWSDisk.ps1'
            'c:\cfn\scripts\Configure-Dfs.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Configure-Dfs.ps1'
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
          commands:
            a-disable-windows-firewall:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "Get-NetFirewallProfile |
                    Set-NetFirewallProfile -Enabled False"
              waitAfterCompletion: '0'
        initializeDisk:
          commands:
            a-initialize-and-format-disk:
              command: !Join
                - ''
                - - >-
                    powershell.exe -Command 
                    'c:\cfn\scripts\Format-AWSDisk.ps1 -DriveLetter "z"'
        rename:
          commands:
            a-set-static-ip:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -ExecutionPolicy RemoteSigned -Command
                    c:\cfn\scripts\Set-StaticIP.ps1
              waitAfterCompletion: '45'
            b-powershell-RenameComputer:
              command: !Join 
                - ''
                - - 'powershell.exe Rename-Computer -NewName '
                  - !Ref FS1NetBIOSName
                  - ' -Restart'
              waitAfterCompletion: forever
        join:
          commands:
            a-join-domain:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Add-Computer -DomainName '
                  - !Ref DomainDNSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force))) -Restart'
              waitAfterCompletion: forever
        configureFSRM:
          commands:
            a-install-fsrm:
              command: !Join
                - ''
                - - powershell.exe -Command "Install-WindowsFeature FS-Resource-Manager -IncludeManagementTools"
            b-configure-alert:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'c:\cfn\scripts\Configure-Fsrm.ps1 -SmtpServer EXCH1.'
                  - !Ref DomainDNSName
                  - ' -AdminEmailAddress '
                  - !Ref DomainAdminUser
                  - '@'
                  - !Ref DomainDNSName
                  - ' -VolumeSize '
                  - !Ref FSVolumeSize
                  - 'GB -QuotaPath c:\AWSShares"'
        installDFS:
          commands:
            a-install-dfs:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Invoke-Command -Session (New-PSSession -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))) -Script { '
                  - 'Install-WindowsFeature FS-DFS-Namespace,FS-DFS-Replication,FS-FileServer,RSAT-DFS-Mgmt-Con -IncludeAllSubFeature'
                  - ' }"'
              waitAfterCompletion: '0'
        createSharedFolders:
          commands:
            a-create-shared-folders:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Invoke-Command -Session (New-PSSession -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))) -Script { '
                  - c:\cfn\scripts\Create-SharedFolders.ps1
                  - ' }"'
              waitAfterCompletion: '0'
        runCreateDfsScript:
          DependsOn: FS2WaitCondition
          commands:
            a-run-dfs-script:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Invoke-Command -Session (New-PSSession -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))) -Script { c:\cfn\scripts\Configure-Dfs.ps1 -DomainName '
                  - !Ref DomainDNSName
                  - ' -Fs1NetBiosName '
                  - !Ref FS1NetBIOSName
                  - ' -Fs2NetBiosName '
                  - !Ref FS2NetBIOSName
                  - ' }"'
              waitAfterCompletion: '0'
        finalize:
          commands:
            a-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref FS1WaitHandle
                  - '"'
              waitAfterCompletion: '0'
    Properties:
      ImageId: !Ref FSImage
      InstanceType: !Ref FSInstanceType
      KeyName: !Ref KeyPair
      PrivateIpAddress: !Ref FS1PrivIP
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub '${ADStackName}-DomainMemberSG'
        - !Ref FS1SecurityGroup
      SubnetId: 
        Fn::ImportValue: 
          !Sub '${NetworkStackName}-PrivSub1Id'
      Tags:
        - Key: 'Name'
          Value: !Ref FS1NetBIOSName
      UserData: !Base64
        Fn::Join:
            - ''
            - - |
                <script>
              - 'cfn-init.exe -v -c config -s '
              - !Ref 'AWS::StackId'
              - ' -r FS1 --region '
              - !Ref 'AWS::Region'
              - |+
              - |
                </script>
  FS2:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - setup
            - initializeDisk
            - rename
            - join
            - configureFSRM
            - installDFS
            - createSharedFolders
            - finalize
        setup:
          files:
            'c:\cfn\cfn-hup.conf':
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackName'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.FS2.Metadata.AWS::CloudFormation::Init
                  - 'action=cfn-init.exe -v -c config -s '
                  - !Ref 'AWS::StackId'
                  - ' -r FS2'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - ''
            'c:\cfn\scripts\Set-StaticIP.ps1':
              content: !Join 
                - ''
                - - $netip = Get-NetIPConfiguration;
                  - >-
                    $ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq
                    $netip.IPv4Address.IpAddress};
                  - Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;
                  - >-
                    Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4
                    -IPAddress $netip.IPv4Address.IpAddress -PrefixLength
                    $ipconfig.PrefixLength -DefaultGateway
                    $netip.IPv4DefaultGateway.NextHop;
                  - >-
                    Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses
                    $netip.DNSServer.ServerAddresses;
                  - ''
            'c:\cfn\scripts\Configure-Fsrm.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Configure-Fsrm.ps1'
            'c:\cfn\scripts\Create-SharedFolders.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Create-SharedFolders.ps1'
            'c:\cfn\scripts\Format-AWSDisk.ps1':
              source: 'https://s3.us-east-2.amazonaws.com/cf-templates-65d2poexw312-us-east-2/Format-AWSDisk.ps1'
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'c:\cfn\cfn-hup.conf'
                  - 'c:\cfn\hooks.d\cfn-auto-reloader.conf'
          commands:
            a-disable-windows-firewall:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "Get-NetFirewallProfile |
                    Set-NetFirewallProfile -Enabled False"
              waitAfterCompletion: '0'
        initializeDisk:
          commands:
            a-initialize-and-format-disk:
              command: !Join
                - ''
                - - >-
                    powershell.exe -Command 
                    'c:\cfn\scripts\Format-AWSDisk.ps1 -DriveLetter "z"'
              waitAfterCompletion: '0'
        rename:
          commands:
            a-set-static-ip:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -ExecutionPolicy RemoteSigned -Command
                    c:\cfn\scripts\Set-StaticIP.ps1
              waitAfterCompletion: '45'
            b-powershell-RenameComputer:
              command: !Join 
                - ''
                - - 'powershell.exe Rename-Computer -NewName '
                  - !Ref FS2NetBIOSName
                  - ' -Restart'
              waitAfterCompletion: forever
        join:
          commands:
            a-join-domain:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Add-Computer -DomainName '
                  - !Ref DomainDNSName
                  - ' -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force))) -Restart'
              waitAfterCompletion: forever
        configureFSRM:
          commands:
            a-install-fsrm:
              command: !Join
                - ''
                - - powershell.exe -Command "Install-WindowsFeature FS-Resource-Manager -IncludeManagementTools"
            b-configure-alert:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'c:\cfn\scripts\Configure-Fsrm.ps1 -SmtpServer EXCH1.'
                  - !Ref DomainDNSName
                  - ' -AdminEmailAddress '
                  - !Ref DomainAdminUser
                  - '@'
                  - !Ref DomainDNSName
                  - ' -VolumeSize '
                  - !Ref FSVolumeSize
                  - 'GB -QuotaPath c:\AWSShares"'
        installDFS:
          commands:
            a-install-dfs:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Invoke-Command -Session (New-PSSession -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))) -Script { '
                  - 'Install-WindowsFeature FS-DFS-Namespace,FS-DFS-Replication,FS-FileServer,RSAT-DFS-Mgmt-Con -IncludeAllSubFeature'
                  - ' }"'
              waitAfterCompletion: '0'
        createSharedFolders:
          commands:
            a-create-shared-folders:
              command: !Join
                - ''
                - - powershell.exe -Command "
                  - 'Invoke-Command -Session (New-PSSession -Credential '
                  - (New-Object System.Management.Automation.PSCredential('
                  - !Ref DomainNetBIOSName
                  - \
                  - !Ref DomainAdminUser
                  - ''','
                  - '(ConvertTo-SecureString '
                  - ''''
                  - !Ref DomainAdminPassword
                  - ''''
                  - ' -AsPlainText -Force)))) -Script { '
                  - c:\cfn\scripts\Create-SharedFolders.ps1
                  - ' }"'
              waitAfterCompletion: '0'
        finalize:
          commands:
            a-signal-success:
              command: !Join
                - ''
                - - cfn-signal.exe -e 0 "
                  - !Ref FS2WaitHandle
                  - '"'
              waitAfterCompletion: '0'
    Properties:
      ImageId: !Ref FSImage
      InstanceType: !Ref FSInstanceType
      KeyName: !Ref KeyPair
      PrivateIpAddress: !Ref FS2PrivIP
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub '${ADStackName}-DomainMemberSG'
        - !Ref FS2SecurityGroup
      SubnetId: 
        Fn::ImportValue: 
          !Sub '${NetworkStackName}-PrivSub2Id'
      Tags:
        - Key: 'Name'
          Value: !Ref FS2NetBIOSName
      UserData: !Base64
        Fn::Join:
            - ''
            - - |
                <script>
              - 'cfn-init.exe -v -c config -s '
              - !Ref 'AWS::StackId'
              - ' -r FS2 --region '
              - !Ref 'AWS::Region'
              - |+
              - |
                </script>
  FS1WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: FS1
    Properties:
      Handle: !Ref FS1WaitHandle
      Timeout: '3600'
  FS1WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  FS2WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: FS2
    Properties:
      Handle: !Ref FS2WaitHandle
      Timeout: '3600'
  FS2WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  FS1SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'File Server 1 Security Group'
      GroupDescription: 'Security Group for File Server 1'
      VpcId:
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5985'
          ToPort: '5985'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub2Cidr'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId:
            Fn::ImportValue:
              !Sub '${ADStackName}-DomainMemberSG'
  FS2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'File Server 2 Security Group'
      GroupDescription: 'Security Group for File Server 2'
      VpcId:
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5985'
          ToPort: '5985'
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-VpcCidr'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 
            Fn::ImportValue:
              !Sub '${NetworkStackName}-PrivSub1Cidr'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId:
            Fn::ImportValue:
              !Sub '${ADStackName}-DomainMemberSG'
